name: Deploying the Nodejs App using ECS Farget Cluster

on:
 push:
  branches:
    - main

env:
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  docker-build-ecr-push:
   runs-on: ubuntu-latest

   steps:
   - name: checkout
     uses: actions/checkout@v4

   - name: configure aws credentials
     uses: aws-actions/configure-aws-credentials@v4
     with: 
      aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      aws-region: ${{ secrets.AWS_REGION }}

   - name: login to ECR
     id: login-ecr
     uses: aws-actions/amazon-ecr-login@v1 

   - name: build image and push to ECR 
     id: build-image
     run: |
      IMAGE_URI= $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

   - name: fill the new imageid in AWS ECS task desfination
     id: task-defi
     uses: aws-actions/amazon-ecs-render-task-defination@v1
     with: 
      task-defination: ecs/task-defination.json
      continer_name: nodejsapp-container
      image: ${{ steps.build-image.outputs.image }}

   - name: deploy ecs task-defination
     id: deploy
     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
     with: 
      task-defination: ${{ steps.task-defi.outputs.task-defination }}
      service: nodejsapp-service
      cluster: nodejsapp-cluster
      wait-for-service-stability: true











     
      

      
    
    
      
      
      
      
     
    
  
